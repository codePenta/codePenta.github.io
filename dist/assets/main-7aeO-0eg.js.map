{"version":3,"file":"main-7aeO-0eg.js","sources":["../../src/services/web/provider/NavContentProvider.ts","../../src/services/web/observers/IntersectionObserver.ts","../../src/components/NavLink.ts","../../src/components/Navbar.ts","../../src/components/ProjectCard.ts","../../src/components/ProjectList.ts","../../src/store.ts","../../src/api/github/mappers/GitHubRepoMapper.ts","../../src/api/github/services/projectsAPI.ts","../../src/index.ts"],"sourcesContent":["import { NavLinkProps } from \"../../../components/NavLink\";\n\nconst projectsPath = \"/public/data/projects.json\";\n\nvar projects: Project[] = [];\n\ntype Project = {\n    name: string;\n    language: string;\n    description: string;\n    html_url: string;\n}\n\nconst defaultNavLinks = [\n    { name: \"Home\", href: \"#home\" },\n    { name: \"Projects\", href: \"#projects-section\" }\n];\n\nfunction createNavLink(props: NavLinkProps): HTMLLIElement\n{\n    const li = document.createElement(\"li\");\n    const a = document.createElement(\"a\");\n    a.textContent = props.name;\n    a.href = props.href;\n    li.appendChild(a);\n    return li;\n}\n\nasync function loadProjects(): Promise<any>\n{\n    try\n    {\n        const res = await fetch(\"/data/projects.json\");\n        projects = await res.json();\n        console.log(projects);\n\n        return projects\n    } catch (error)\n    {\n        console.error(`Failed loading projects: ${error}`)\n    }\n}\n\nexport async function createProjectsSection()\n{\n    if (projects.length == 0)\n    {\n        projects = await loadProjects();\n    }\n\n    const projectContainer = document.querySelector(\"#projects\");\n    if (!projectContainer)\n        return;\n    projectContainer.innerHTML = \"\";\n    for (const project of projects)\n    {\n        projectContainer.appendChild(createProjectCard(project));\n    }\n}\n\nfunction createProjectCard(project: Project): HTMLElement\n{\n    const card = document.createElement(\"div\");\n    card.className = \"project-card\";\n\n    const h2 = document.createElement(\"h2\");\n    h2.textContent = project.name;\n\n    const language = document.createElement(\"p\");\n    language.textContent = project.language;\n\n    const url = document.createElement(\"a\");\n    url.textContent = `Click here`;\n    url.href = project.html_url;\n\n    const description = document.createElement(\"p\");\n    description.textContent = project.description;\n\n    card.append(h2, language, url, description);\n    return card;\n}\n\nfunction renderNavbar(links: { name: string, href: string }[])\n{\n    const navbarList = document.querySelector(\"nav ul\");\n    if (!navbarList) return;\n    navbarList.innerHTML = \"\";\n    for (const link of links)\n    {\n        const li = document.createElement(\"li\");\n        const a = document.createElement(\"a\");\n        a.textContent = link.name;\n        a.href = link.href;\n        li.appendChild(a);\n        navbarList.appendChild(li);\n    }\n}\n\nexport async function loadProjectsIntoNavbar()\n{\n    if (projects.length === 0)\n    {\n        projects = await loadProjects();\n    }\n\n    renderNavbar(projects.map(project => ({ name: project.name, href: project.html_url })));\n}\n\nexport function unloadProjectsFromNavbar()\n{\n    renderNavbar(defaultNavLinks);\n}","import { loadProjectsIntoNavbar, unloadProjectsFromNavbar } from \"../provider/NavContentProvider\";\n\nconst options = {\n    threshold: 0.1,\n};\n\nconst callback = (entries: any, observer: any) =>\n{\n    entries.forEach((entry: any) =>\n    {\n        if (entry.isIntersecting) // Is target visible\n        {\n            if (entry.target.id == 'projects-section')\n                loadProjectsIntoNavbar();\n            else\n                unloadProjectsFromNavbar();\n        }\n    });\n};\n\nconst scrollObserver = new IntersectionObserver(callback, options);\n\nexport function observeSections()\n{\n    document.querySelectorAll('section').forEach(section =>\n    {\n        scrollObserver.observe(section)\n    });\n}","export type NavLinkProps = {\n    name: string;\n    href: string;\n};\n\nexport function createNavLink(props: NavLinkProps): HTMLLIElement\n{\n    const li = document.createElement(\"li\");\n    const a = document.createElement(\"a\");\n    a.textContent = props.name;\n    a.href = props.href;\n    li.appendChild(a);\n    return li;\n}","import { createNavLink, NavLinkProps } from './NavLink';\n\ntype NavbarProps = {\n    links: NavLinkProps[];\n};\n\n// Diese Funktion erstellt die ul und hängt die links an.\n// Sie kann neu aufgerufen werden, um die Navbar zu aktualisieren.\nexport function createNavbar(props: NavbarProps): HTMLUListElement\n{\n    const ul = document.createElement(\"ul\");\n    ul.id = \"navbar\"; // Oder eine andere ID\n\n    const fragment = document.createDocumentFragment();\n    props.links.forEach(link =>\n    {\n        fragment.appendChild(createNavLink(link));\n    });\n\n    ul.appendChild(fragment);\n    return ul;\n}","import { Project } from '../api/github/entities/ProjectEntity';\n\nexport function createProjectCard(project: Project): HTMLElement\n{\n    const card = document.createElement(\"div\");\n    card.className = \"project-card\"; // CSS-Klasse für die Karte\n\n    const h2 = document.createElement(\"h2\");\n    h2.textContent = project.name;\n\n    const language = document.createElement(\"p\");\n    language.textContent = `Language: ${project.language}`; // Bessere Beschriftung\n\n    const description = document.createElement(\"p\");\n    description.textContent = project.description;\n\n    const url = document.createElement(\"a\");\n    url.textContent = `View on GitHub`; // Besserer Link-Text\n    url.href = project.url; // 'url' ist jetzt der korrekte Property-Name\n    url.target = \"_blank\"; // Link in neuem Tab öffnen\n    url.rel = \"noopener noreferrer\"; // Sicherheitsmaßnahme für target=\"_blank\"\n\n    // Optional: Projekt-Tags anzeigen\n    if (project.tags && project.tags.length > 0)\n    {\n        const tagsContainer = document.createElement(\"div\");\n        tagsContainer.className = \"project-tags\";\n        project.tags.forEach(tag =>\n        {\n            const span = document.createElement(\"span\");\n            span.className = \"tag\";\n            span.textContent = tag;\n            tagsContainer.appendChild(span);\n        });\n        card.appendChild(tagsContainer);\n    }\n\n    card.append(h2, language, description, url); // Reihenfolge kann angepasst werden\n    return card;\n}","import { Project } from '../api/github/entities/ProjectEntity'; // Importiere den Project-Typ\nimport { createProjectCard } from './ProjectCard'; // Importiere die Funktion zum Erstellen einer einzelnen Karte\n\ntype ProjectListProps = {\n    projects: Project[];\n    // Optional: Könntest hier weitere Props übergeben, z.B. für eine Überschrift, CSS-Klassen etc.\n    // headingText?: string;\n    // className?: string;\n};\n\nexport function createProjectList(props: ProjectListProps): HTMLDivElement\n{\n    const projectListContainer = document.createElement(\"div\");\n    projectListContainer.className = \"projects-list-container\";\n\n    if (!props.projects || props.projects.length === 0)\n    {\n        const noProjectsMessage = document.createElement(\"p\");\n        noProjectsMessage.textContent = \"No projects available at the moment. Please check back later!\";\n        noProjectsMessage.className = \"no-projects-message\";\n        projectListContainer.appendChild(noProjectsMessage);\n        return projectListContainer;\n    }\n\n    const fragment = document.createDocumentFragment();\n\n    for (const project of props.projects)\n    {\n        const projectCard = createProjectCard(project);\n        fragment.appendChild(projectCard);\n    }\n\n    projectListContainer.appendChild(fragment);\n\n    return projectListContainer;\n}","import { Project } from '../src/api/github/entities/ProjectEntity';\n\nexport type AppState = {\n    projects: Project[];\n    navbarLinks: { name: string; href: string }[];\n};\n\nexport const state: AppState = {\n    projects: [],\n    navbarLinks: [\n        { name: \"Home\", href: \"#home\" },\n        { name: \"Projects\", href: \"#projects-section\" }\n    ]\n};\n\nconst subscribers: ((state: AppState) => void)[] = [];\n\nexport function subscribe(callback: (state: AppState) => void)\n{\n    subscribers.push(callback);\n    callback(state); // Initialen Zustand sofort senden\n}\n\nfunction notifySubscribers()\n{\n    subscribers.forEach(callback => callback(state));\n}\n\nexport function updateProjects(newProjects: Project[])\n{\n    state.projects = newProjects;\n    state.navbarLinks = newProjects.map(p => ({ name: p.name, href: p.url }));\n    notifySubscribers(); // Informiere alle, die auf Änderungen hören\n}","import { GitHubRepoApiResponse, Project } from '../entities/ProjectEntity';\n\nexport function mapGitHubRepoToProject(repo: GitHubRepoApiResponse): Project\n{\n    return {\n        id: repo.name,\n        name: repo.name,\n        description: repo.description ?? \"No description available.\",\n        url: repo.html_url,\n        imageUrl: repo.owner?.avatar_url ?? \"No avatar available.\",\n        tags: repo.topics || [],\n        language: repo.language ?? \"Unknown\",\n    };\n}\n\nexport function mapGitHubReposToProjects(repos: GitHubRepoApiResponse[]): Project[]\n{\n    return repos.map(mapGitHubRepoToProject);\n}","// src/api/github/services/GitHubApiService.ts (oder projectsApi.ts)\n\nimport { GitHubRepoApiResponse, Project } from '../entities/ProjectEntity';\nimport { mapGitHubReposToProjects } from '../mappers/GitHubRepoMapper';\n\nconst PROJECTS_DATA_PATH = \"/data/projects.json\"; // Pfad relativ zum public-Ordner/Root der Deployment-Seite\n\nexport async function fetchProjects(): Promise<Project[]>\n{\n    try\n    {\n        const response = await fetch(PROJECTS_DATA_PATH); // Lädt die generierte JSON\n        if (!response.ok)\n        {\n            throw new Error(`Failed to load projects.json: ${response.status} ${response.statusText}`);\n        }\n        const rawProjects: GitHubRepoApiResponse[] = await response.json(); // Annahme, dass JSON-Struktur wie API-Antwort ist\n\n        // Verwende den Mapper, um die Rohdaten in dein Project-Format zu überführen\n        return mapGitHubReposToProjects(rawProjects);\n    } catch (error)\n    {\n        console.error(\"Error fetching projects from local JSON:\", error);\n        throw error; // Fehler weiterwerfen zur Behandlung in der aufrufenden Komponente/Logik\n    }\n}","// src/main.ts\n\n// Importiere alles, was die App orchestriert\nimport { observeSections } from \"./services/web/observers/IntersectionObserver\";\n// createProjectsSection aus NavContentProvider.ts ist nicht mehr nötig, da der Store die Daten verwaltet\n// und ProjectList.ts die Darstellung macht.\n\nimport { createNavbar } from './components/Navbar'; // Deine Navbar-Komponente\nimport { createProjectList } from \"./components/ProjectList\"; // Deine ProjectList-Komponente\n\nimport { subscribe, updateProjects } from './store'; // Dein zentraler Store\nimport { fetchProjects } from './api/github/services/projectsAPI'; // Die Funktion, die Projekte holt\n\n\n// DOM-Referenzen, die für die UI-Updates benötigt werden\n// Hier können sie direkt sein, da sie nur einmal zu Beginn abgefragt werden\nconst navElement = document.querySelector(\"nav\");\nconst projectsSection = document.querySelector(\"#projects\");\nconst appRootElement = document.getElementById(\"app-root\"); // Optional: Ein zentrales Element, wo alles gerendert wird\n// Oder eben direkt body/main/sections\n\n\n// --- Initialisierung der Anwendung ---\nasync function initializeApp(): Promise<void>\n{\n    console.log(\"Initializing application...\");\n\n    // 1. Initialisiere den Intersection Observer\n    observeSections();\n\n    // 2. Lade die initialen Projektdaten und aktualisiere den Store\n    try\n    {\n        // Optionale Ladeanzeige, BEVOR die Daten geladen werden\n        if (projectsSection)\n        {\n            projectsSection.innerHTML = \"<p>Loading projects...</p>\";\n        }\n\n        const initialProjects = await fetchProjects(); // Daten laden\n        updateProjects(initialProjects); // Store aktualisieren -> triggert den subscribe-Callback!\n\n    } catch (error)\n    {\n        console.error(\"Error loading initial project data:\", error);\n        // Fallback: Store mit leeren Projekten aktualisieren oder Fehlermeldung setzen\n        updateProjects([]); // Oder du hast eine \"setError\" Funktion im Store\n        if (projectsSection)\n        {\n            projectsSection.innerHTML = \"<p class='error-message'>Failed to load projects. Please try again later.</p>\";\n        }\n    }\n    console.log(\"Application initialized.\");\n}\n\nsubscribe(state =>\n{\n    console.log(\"Store state updated, rendering UI...\", state);\n\n    // Aktualisiere die Navbar\n    if (navElement)\n    {\n        // Die alte Navbar entfernen, falls vorhanden\n        // ACHTUNG: Hier keine Transition-Logik, das wäre im createNavbar oder über MutationObserver\n        while (navElement.firstChild)\n        {\n            navElement.removeChild(navElement.firstChild);\n        }\n        navElement.appendChild(createNavbar({ links: state.navbarLinks }));\n    }\n\n    // Aktualisiere die Projektsektion\n    if (projectsSection)\n    {\n        // Hier wäre die Logik für Animationen relevant, z.B. wenn Projektkarten ein- und ausfaden sollen\n        // Das ist komplexer als einfach innerHTML = \"\" oder replaceChild.\n        // Für einfache Ersetzung:\n        while (projectsSection.firstChild)\n        {\n            projectsSection.removeChild(projectsSection.firstChild);\n        }\n        projectsSection.appendChild(createProjectList({ projects: state.projects }));\n    }\n});\n\n\n// --- Start der Anwendung nach DOM-Bereitschaft ---\n// Nur ein DOMContentLoaded-Listener, der die Hauptinitialisierungsfunktion aufruft\ndocument.addEventListener(\"DOMContentLoaded\", initializeApp);"],"names":["projects","defaultNavLinks","loadProjects","error","renderNavbar","links","navbarList","link","li","a","loadProjectsIntoNavbar","project","unloadProjectsFromNavbar","options","callback","entries","observer","entry","scrollObserver","observeSections","section","createNavLink","props","createNavbar","ul","fragment","createProjectCard","card","h2","language","description","url","tagsContainer","tag","span","createProjectList","projectListContainer","noProjectsMessage","projectCard","state","subscribers","subscribe","notifySubscribers","updateProjects","newProjects","p","mapGitHubRepoToProject","repo","_a","mapGitHubReposToProjects","repos","PROJECTS_DATA_PATH","fetchProjects","response","rawProjects","navElement","projectsSection","initializeApp","initialProjects"],"mappings":"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"}