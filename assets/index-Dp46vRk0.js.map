{"version":3,"file":"index-Dp46vRk0.js","sources":["../../src/constants.ts","../../src/api/github/entities/FilterEntity.ts","../../src/services/web/provider/FilterProvider.ts","../../src/store.ts","../../src/components/ProjectCard.ts","../../src/components/ProjectList.ts","../../src/components/NavLink.ts","../../src/services/web/provider/NavContentProvider.ts","../../src/services/web/observers/IntersectionObserver.ts","../../src/components/Navbar.ts","../../src/services/IconService.ts","../../src/api/github/mappers/GitHubRepoMapper.ts","../../src/api/github/services/projectsAPI.ts","../../src/index.ts"],"sourcesContent":["export class FilePaths\r\n{\r\n    static readonly PROJECTS_DATA_PATH = \"/data/projects.json\";\r\n}\r\n\r\nexport class Tags\r\n{\r\n    // Project tags\r\n    static readonly PROJECTS_LIST_ID = \"#projects-list\";\r\n    static readonly PROJECT_CARD_CLASSNAME = \".project-card\";\r\n    static readonly PROJECT_AUTHOR_CLASSNAME = \".author-img-container\";\r\n\r\n    // Error tags\r\n    static readonly ERROR_NO_PROJECTS_CLASSNAME = \"no-projects-message\";\r\n\r\n    // For observers\r\n    static readonly OBSERVER_PROJECT_SECTION = \"#projects\";\r\n}\r\n\r\nexport const formatWithoutPrefix = (value: string) =>\r\n{\r\n    return value.substring(1, value.length);\r\n}","import { Project } from \"./ProjectEntity\";\r\n\r\nexport class Filter\r\n{\r\n    constructor(public readonly filterName: string, public readonly filteredContent: Project[])\r\n    { }\r\n\r\n    static createFilter(language: string, projects: Project[]): Filter\r\n    {\r\n        return new Filter(\r\n            language,\r\n            projects.filter(project => project.language === language),\r\n        )\r\n    }\r\n\r\n    get count(): number\r\n    {\r\n        return this.filteredContent.length;\r\n    }\r\n}","import { Project } from \"../../../api/github/entities/ProjectEntity\";\r\nimport { Filter } from \"../../../api/github/entities/FilterEntity\";\r\n\r\n// Erstelle eine Liste aller eindeutigen Sprachen aus den Projekten\r\nexport function createFilters(projects: Project[]): Filter[]\r\n{\r\n    const languages = [...new Set(projects.map(p => p.language).filter(Boolean))] as string[];\r\n\r\n    const allFilter = new Filter('All', projects);\r\n\r\n    const languageFilters = languages.map(lang => Filter.createFilter(lang, projects));\r\n\r\n    return [allFilter, ...languageFilters];\r\n}","import { Project } from '../src/api/github/entities/ProjectEntity';\r\nimport { Filter } from './api/github/entities/FilterEntity';\r\nimport { createFilters } from './services/web/provider/FilterProvider';\r\n\r\nexport type AppState = {\r\n    projects: Project[];\r\n    navbarLinks: { name: string; href: string, ignoredByObserver: boolean }[];\r\n    filter: Filter[];\r\n    selectedFilter: string;\r\n};\r\n\r\nexport const state: AppState = {\r\n    projects: [],\r\n    navbarLinks: [\r\n        { name: \"Home\", href: \"#home\", ignoredByObserver: false },\r\n        { name: \"Projects\", href: \"#projects\", ignoredByObserver: false },\r\n    ],\r\n    filter: [],\r\n    selectedFilter: \"\",\r\n};\r\n\r\nexport function updateState(newProjects: Project[])\r\n{\r\n    state.projects = newProjects;\r\n    state.filter = createFilters(newProjects);\r\n}","import { Project } from '../api/github/entities/ProjectEntity';\r\nimport { formatWithoutPrefix, Tags } from '../constants';\r\n\r\nexport function createProjectCard(project: Project): HTMLElement\r\n{\r\n    const card = document.createElement(\"div\");\r\n    card.className = formatWithoutPrefix(Tags.PROJECT_CARD_CLASSNAME);\r\n\r\n    const cardHeading = document.createElement(\"div\");\r\n    cardHeading.className = \"project-card-heading\";\r\n\r\n    const h2 = document.createElement(\"h2\");\r\n    h2.textContent = project.name;\r\n\r\n    cardHeading.append(h2);\r\n\r\n    const cardContent = document.createElement(\"div\");\r\n    cardContent.className = \"project-card-details\";\r\n\r\n    const language = document.createElement(\"img\");\r\n    language.src = `${project.languageIconUrl}`;\r\n    language.alt = project.language;\r\n    language.width = 40;\r\n    language.height = 40;\r\n\r\n    const description = document.createElement(\"p\");\r\n    description.textContent = project.description;\r\n    cardContent.append(language, description);\r\n\r\n    const url = document.createElement(\"a\");\r\n    url.textContent = `View on GitHub`;\r\n    url.href = project.url;\r\n    url.target = \"_blank\";\r\n    url.rel = \"noopener noreferrer\";\r\n\r\n    const cardFooter = document.createElement(\"div\");\r\n    cardFooter.className = \"project-card-footer\";\r\n\r\n    const imgDiv = document.createElement(\"div\");\r\n    imgDiv.className = \"author-img-container\";\r\n\r\n    const authorImg = document.createElement(\"img\");\r\n    authorImg.src = project.imageUrl;\r\n    authorImg.alt = \"Author image\"\r\n    imgDiv.appendChild(authorImg);\r\n\r\n    cardFooter.append(url, imgDiv);\r\n\r\n    card.append(cardHeading, cardContent, cardFooter);\r\n    return card;\r\n}","import { Project } from '../api/github/entities/ProjectEntity'; // Importiere den Project-Typ\r\nimport { formatWithoutPrefix, Tags } from '../constants';\r\nimport { createProjectCard } from './ProjectCard'; // Importiere die Funktion zum Erstellen einer einzelnen Karte\r\n\r\ntype ProjectListProps = {\r\n    projects: Project[];\r\n    // Optional: Könntest hier weitere Props übergeben, z.B. für eine Überschrift, CSS-Klassen etc.\r\n    // headingText?: string;\r\n    // className?: string;\r\n};\r\n\r\nexport function renderProjectList(props: ProjectListProps)\r\n{\r\n    const projectListContainer = document.querySelector(Tags.PROJECTS_LIST_ID);\r\n    if (!projectListContainer)\r\n        return\r\n\r\n    projectListContainer.innerHTML = \"\";\r\n\r\n    if (!props.projects || props.projects.length === 0)\r\n    {\r\n        const noProjectsMessage = document.createElement(\"p\");\r\n        noProjectsMessage.textContent = \"No projects available at the moment. Please check back later!\";\r\n        noProjectsMessage.className = Tags.ERROR_NO_PROJECTS_CLASSNAME;\r\n        projectListContainer.appendChild(noProjectsMessage);\r\n    }\r\n\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    for (const project of props.projects)\r\n    {\r\n        const projectCard = createProjectCard(project);\r\n        fragment.appendChild(projectCard);\r\n    }\r\n\r\n    projectListContainer.appendChild(fragment);\r\n\r\n    return projectListContainer;\r\n}","import { Project } from \"../api/github/entities/ProjectEntity\";\r\nimport { state } from \"../store\";\r\nimport { renderProjectList } from \"./ProjectList\";\r\n\r\nexport type NavLinkProjectProps = {\r\n    href: string;\r\n    name: string;\r\n    ignoredByObserver: boolean;\r\n};\r\n\r\nexport function createNavLink(navLinkProps: NavLinkProjectProps): HTMLLIElement\r\n{\r\n    const li = document.createElement(\"li\");\r\n    const a = document.createElement(\"a\");\r\n    a.textContent = navLinkProps.name;\r\n    a.href = navLinkProps.href;\r\n\r\n    if (navLinkProps.ignoredByObserver)\r\n    {\r\n        setupNavLinkForUserClick(a);\r\n    }\r\n\r\n    li.appendChild(a);\r\n    return li;\r\n}\r\n\r\nexport function renderNavLink(parent: DocumentFragment, navLinkProps: NavLinkProjectProps)\r\n{\r\n    const li = document.createElement(\"li\");\r\n    const a = document.createElement(\"a\");\r\n\r\n    a.textContent = navLinkProps.name;\r\n    a.href = navLinkProps.href;\r\n\r\n    if (navLinkProps.ignoredByObserver)\r\n    {\r\n        setupNavLinkForUserClick(a);\r\n    }\r\n\r\n    li.appendChild(a);\r\n    parent.appendChild(li);\r\n}\r\n\r\nfunction setupNavLinkForUserClick(a: HTMLAnchorElement)\r\n{\r\n    a.addEventListener('click', handleClick);\r\n}\r\n\r\nfunction handleClick(event: any)\r\n{\r\n    event.preventDefault();\r\n\r\n    state.selectedFilter = event.target.innerText;\r\n    if (state.selectedFilter === 'All')\r\n    {\r\n        renderProjectList({ projects: state.projects });\r\n        return;\r\n    }\r\n\r\n    const filteredProjets: Project[] = state.projects.filter(isProjectInFilter);\r\n    renderProjectList({ projects: filteredProjets });\r\n}\r\n\r\nfunction isProjectInFilter(value: Project)\r\n{\r\n    var isInFilter = value.language === state.selectedFilter;\r\n\r\n    return isInFilter;\r\n}","import { Filter } from \"../../../api/github/entities/FilterEntity\";\r\nimport { NavLinkProjectProps, renderNavLink } from \"../../../components/NavLink\";\r\nimport { state } from \"../../../store\";\r\n\r\nfunction renderNavbar(props: NavLinkProjectProps[])\r\n{\r\n    const navbarList = document.querySelector(\"nav ul\");\r\n    if (!navbarList)\r\n    {\r\n        console.warn(\"Navigation list not found\");\r\n        return;\r\n    }\r\n\r\n    navbarList.innerHTML = \"\";\r\n\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    props.forEach(link =>\r\n    {\r\n        renderNavLink(fragment, {\r\n            name: link.name,\r\n            href: link.href,\r\n            ignoredByObserver: link.ignoredByObserver\r\n        });\r\n    });\r\n\r\n    // Füge alles auf einmal ein\r\n    navbarList.appendChild(fragment);\r\n}\r\n\r\nexport async function loadProjectsIntoNavbar()\r\n{\r\n    renderNavbar(state.filter.map(filter => ({ href: filter.filterName, name: filter.filterName, ignoredByObserver: true })));\r\n}\r\n\r\nexport function unloadProjectsFromNavbar()\r\n{\r\n    renderNavbar(state.navbarLinks);\r\n}","import { Tags } from \"../../../constants\";\r\nimport { loadProjectsIntoNavbar, unloadProjectsFromNavbar } from \"../provider/NavContentProvider\";\r\n\r\nclass Observer\r\n{\r\n    private previousEntryId: string = \"\";\r\n    private options = {\r\n        threshold: 0.5,\r\n    }\r\n\r\n    private sections: Tags[] = [\r\n        Tags.OBSERVER_PROJECT_SECTION\r\n    ]\r\n\r\n    private scrollObserver: IntersectionObserver;\r\n\r\n    constructor()\r\n    {\r\n        this.scrollObserver = new IntersectionObserver(this.callback, this.options);\r\n    }\r\n\r\n    private callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) =>\r\n    {\r\n        entries.forEach((entry: any) =>\r\n        {\r\n            if (entry.isIntersecting)\r\n            {\r\n                const currentSectionId = entry.target.id;\r\n                if (currentSectionId !== this.previousEntryId)\r\n                {\r\n                    if (this.sections.includes(`#${currentSectionId}`))\r\n                    {\r\n                        loadProjectsIntoNavbar();\r\n                        window.history.pushState(entry.target.textContent, \"Title\", `#${entry.target.id}`);\r\n                    }\r\n                    else\r\n                    {\r\n                        unloadProjectsFromNavbar();\r\n                        window.history.pushState(entry.target.textContent, \"Title\", \"/\");\r\n                    }\r\n\r\n                    this.previousEntryId = currentSectionId;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    public get get(): IntersectionObserver\r\n    {\r\n        return this.scrollObserver;\r\n    }\r\n\r\n    observeSections()\r\n    {\r\n        document.querySelectorAll('section').forEach(section =>\r\n        {\r\n            this.get.observe(section)\r\n        });\r\n    }\r\n}\r\n\r\nexport\r\n{\r\n    Observer\r\n}","import { createNavLink, NavLinkProjectProps } from './NavLink';\r\n\r\ntype NavbarProps = {\r\n    links: NavLinkProjectProps[];\r\n};\r\n\r\nexport function createNavbar(props: NavbarProps): HTMLUListElement\r\n{\r\n    const ul = document.createElement(\"ul\");\r\n\r\n    const fragment = document.createDocumentFragment();\r\n    props.links.forEach(link =>\r\n    {\r\n        fragment.appendChild(createNavLink(link));\r\n    });\r\n\r\n    ul.appendChild(fragment);\r\n    return ul;\r\n}","import icons from \"../data/icons.json\";\r\n\r\nexport class IconService\r\n{\r\n    private readonly iconMap: { [key: string]: string; } | undefined;\r\n\r\n    private availableLanguages: any[] = [];\r\n\r\n    constructor()\r\n    {\r\n        this.iconMap = icons;\r\n    }\r\n\r\n    public getIconUrl(language: string)\r\n    {\r\n        if (this.iconMap === undefined)\r\n            throw new Error(`No icon found for language ${language}`);\r\n\r\n        return this.iconMap[language.toLowerCase()];\r\n    }\r\n\r\n    public hasIconForLanguage(language: string): boolean\r\n    {\r\n        const languageSet = new Set(this.availableLanguages);\r\n        return languageSet.has(language.toLowerCase);\r\n    }\r\n}","import { GitHubRepoApiResponse, Project } from '../entities/ProjectEntity';\r\nimport { IconService } from '../../../services/IconService';\r\n\r\nexport function mapGitHubReposToProjects(repos: GitHubRepoApiResponse[]): Project[]\r\n{\r\n    const iconService = new IconService();\r\n\r\n    const languageNameMap: { [key: string]: string } = {\r\n        'C#': 'csharp',\r\n        'C++': 'cpp',\r\n    };\r\n\r\n    const mappedProjects = repos.map(repo =>\r\n    {\r\n        const rawLanguage = repo.language ?? \"Not specified\";\r\n\r\n        const mappedLanguage = languageNameMap[rawLanguage] || rawLanguage;\r\n        console.log(mappedLanguage);\r\n\r\n        return {\r\n            name: repo.name,\r\n            description: repo.description ?? \"No description available.\",\r\n            url: repo.url,\r\n            imageUrl: repo.image ?? \"No avatar available.\",\r\n            language: rawLanguage,\r\n            languageIconUrl: iconService.getIconUrl(mappedLanguage),\r\n        };\r\n    });\r\n\r\n    return mappedProjects;\r\n}","import { FilePaths } from '../../../constants';\r\nimport { GitHubRepoApiResponse, Project } from '../entities/ProjectEntity';\r\nimport { mapGitHubReposToProjects } from '../mappers/GitHubRepoMapper';\r\n\r\nexport async function fetchProjects(): Promise<Project[]>\r\n{\r\n    try\r\n    {\r\n        const response = await fetch(FilePaths.PROJECTS_DATA_PATH);\r\n        if (!response.ok)\r\n        {\r\n            throw new Error(`Failed to load projects.json: ${response.status} ${response.statusText}`);\r\n        }\r\n        const rawProjects: GitHubRepoApiResponse[] = await response.json();\r\n        return mapGitHubReposToProjects(rawProjects);\r\n    } catch (error)\r\n    {\r\n        console.error(\"Error fetching projects from local JSON:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fetchLanguagesFromProjects(rawProjects: Project[]): Promise<string>\r\n{\r\n    let mappedLanguages = rawProjects.map((toMap => toMap.language));\r\n    let removedDuplicates = Array.from(new Set(mappedLanguages));\r\n    return JSON.stringify(removedDuplicates, null, 2);\r\n}","import { Observer } from \"./services/web/observers/IntersectionObserver\";\r\nimport { createNavbar } from './components/Navbar';\r\nimport { renderProjectList } from \"./components/ProjectList\";\r\n\r\nimport { state, updateState } from './store';\r\nimport { fetchLanguagesFromProjects, fetchProjects } from './api/github/services/projectsAPI';\r\nimport { isConstructSignatureDeclaration } from \"typescript\";\r\nimport { IconService } from \"./services/IconService\";\r\n\r\nconst navElement = document.querySelector(\"nav\");\r\nconst projectsList = document.querySelector(\"#projects-list\");\r\n\r\nasync function initializeApp(): Promise<void>\r\n{\r\n    console.log(\"Initializing application...\");\r\n    const observer = new Observer();\r\n\r\n    try\r\n    {\r\n        if (projectsList)\r\n        {\r\n            const initialProjects = await fetchProjects();\r\n            updateState(initialProjects);\r\n\r\n            projectsList.innerHTML = \"<p>Loading projects...</p>\";\r\n\r\n            while (projectsList.firstChild)\r\n            {\r\n                projectsList.removeChild(projectsList.firstChild);\r\n            }\r\n            renderProjectList({ projects: state.projects });\r\n        }\r\n\r\n        if (navElement)\r\n        {\r\n            while (navElement.firstChild)\r\n            {\r\n                navElement.removeChild(navElement.firstChild);\r\n            }\r\n\r\n            navElement.appendChild(createNavbar({ links: state.navbarLinks }))\r\n        }\r\n\r\n        observer.observeSections();\r\n\r\n    } catch (error)\r\n    {\r\n        console.error(\"Error loading initial project data:\", error);\r\n        updateState([]);\r\n        if (projectsList)\r\n        {\r\n            projectsList.innerHTML = \"<p class='error-message'>Failed to load projects. Please try again later.</p>\";\r\n        }\r\n    }\r\n    console.log(\"Application initialized.\");\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", initializeApp);"],"names":["_FilePaths","FilePaths","_Tags","Tags","formatWithoutPrefix","value","Filter","filterName","filteredContent","language","projects","project","createFilters","languages","p","allFilter","languageFilters","lang","state","updateState","newProjects","createProjectCard","card","cardHeading","h2","cardContent","description","url","cardFooter","imgDiv","authorImg","renderProjectList","props","projectListContainer","noProjectsMessage","fragment","projectCard","createNavLink","navLinkProps","li","a","setupNavLinkForUserClick","renderNavLink","parent","handleClick","event","filteredProjets","isProjectInFilter","isInFilter","renderNavbar","navbarList","link","loadProjectsIntoNavbar","filter","unloadProjectsFromNavbar","Observer","entries","observer","entry","currentSectionId","section","createNavbar","ul","IconService","icons","mapGitHubReposToProjects","repos","iconService","languageNameMap","repo","rawLanguage","mappedLanguage","fetchProjects","response","rawProjects","error","navElement","projectsList","initializeApp","initialProjects"],"mappings":"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"}