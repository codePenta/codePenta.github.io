{"version":3,"file":"index-BqoO1nqA.js","sources":["../../src/api/github/entities/Filter.ts","../../src/utils/constants.ts","../../src/services/web/provider/FilterProvider.ts","../../src/store.ts","../../src/utils/Helpers.ts","../../src/components/ProjectCard.ts","../../src/components/ProjectList.ts","../../src/components/NavLink.ts","../../src/services/web/provider/NavContentProvider.ts","../../src/services/web/observers/IntersectionObserver.ts","../../src/components/Navbar.ts","../../src/services/IconService.ts","../../src/api/github/mappers/GitHubRepoMapper.ts","../../src/api/github/services/projectsAPI.ts","../../src/index.ts"],"sourcesContent":["import { Project } from \"./Project\";\r\n\r\nexport class Filter\r\n{\r\n    constructor(public readonly filterName: string, public readonly filteredContent: Project[])\r\n    { }\r\n\r\n    static create(language: string, projects: Project[]): Filter\r\n    {\r\n        return new Filter(\r\n            language,\r\n            projects.filter(project => project.language === language),\r\n        )\r\n    }\r\n\r\n    get count(): number\r\n    {\r\n        return this.filteredContent.length;\r\n    }\r\n}","export class FilePaths\r\n{\r\n    static readonly PROJECTS_DATA_PATH = \"/data/projects.json\";\r\n}\r\n\r\nexport class Tags\r\n{\r\n    // Project tags\r\n    static readonly PROJECTS_LIST_ID = \"#projects-list\";\r\n    static readonly PROJECT_CARD_CLASSNAME = \".project-card\";\r\n    static readonly PROJECT_CARD_HEADING = \".project-card-heading\";\r\n    static readonly PROJECT_CARD_DETAILS = \".project-card-details\";\r\n    static readonly PROJECT_CARD_FOOTER = \".project-card-footer\";\r\n    static readonly PROJECT_AUTHOR_CLASSNAME = \".author-img-container\";\r\n\r\n    // Error tags\r\n    static readonly ERROR_NO_PROJECTS_CLASSNAME = \".no-projects-message\";\r\n\r\n    // For observers\r\n    static readonly OBSERVER_PROJECT_SECTION = \"#projects\";\r\n}\r\n\r\nexport class FilterConstants\r\n{\r\n    static readonly DEFAULT_FILTER_STATE = 'All';\r\n}","import { Project } from \"../../../api/github/entities/Project\";\r\nimport { Filter } from \"../../../api/github/entities/Filter\";\r\nimport { FilterConstants } from \"../../../utils/constants\";\r\n\r\nexport function createFilters(projects: Project[]): Filter[]\r\n{\r\n    const languages = [...new Set(projects.map(p => p.language).filter(Boolean))] as string[];\r\n\r\n    const allFilter = new Filter(FilterConstants.DEFAULT_FILTER_STATE, projects);\r\n\r\n    const languageFilters = languages.map(lang => Filter.create(lang, projects));\r\n\r\n    return [allFilter, ...languageFilters];\r\n}","import { Project } from './api/github/entities/Project';\r\nimport { Filter } from './api/github/entities/Filter';\r\nimport { createFilters } from './services/web/provider/FilterProvider';\r\n\r\nexport type AppState = {\r\n    projects: Project[];\r\n    navbarLinks: { name: string; href: string, isContentFetched: boolean, ignoredByObserver: boolean }[];\r\n    filter: Filter[];\r\n    selectedFilter: string;\r\n    previousSection: string;\r\n    nextSection: string;\r\n};\r\n\r\nexport const state: AppState = {\r\n    projects: [],\r\n    navbarLinks: [\r\n        { name: \"Home\", href: \"#home\", isContentFetched: false, ignoredByObserver: false },\r\n        { name: \"Projects\", href: \"#projects\", isContentFetched: false, ignoredByObserver: false },\r\n    ],\r\n    filter: [],\r\n    selectedFilter: \"\",\r\n    previousSection: \"\",\r\n    nextSection: \"\",\r\n};\r\n\r\nexport function updateState(newProjects: Project[])\r\n{\r\n    state.projects = newProjects;\r\n    state.filter = createFilters(newProjects);\r\n}","import { updateState } from \"../store\";\r\n\r\nexport const clearElement = (element: Element) => \r\n{\r\n    if (element)\r\n    {\r\n        element.innerHTML = '';\r\n    }\r\n}\r\n\r\nexport const renderError = (element: Element | null, error: any) => \r\n{\r\n    console.log(`Error: ${error}`);\r\n\r\n    if (element)\r\n    {\r\n        const errorElement = element;\r\n        errorElement.textContent = \"No projects available at the moment. Please check back later!\";\r\n        errorElement.className = \"error-message\";\r\n        errorElement.innerHTML = `Failed loading data ${error}`;\r\n    }\r\n}\r\n\r\nexport const renderGlobalError = (element: Element | null, error: any) =>\r\n{\r\n    updateState([]);\r\n    renderError(element, error);\r\n}\r\n\r\nexport const removePrefixFromTag = (value: string) =>\r\n{\r\n    return value.substring(1, value.length);\r\n}\r\n\r\nexport const getElementFromQuerySelector = (selector: string) => \r\n{\r\n    const element = document.querySelector(selector)!;\r\n    return element;\r\n}","import { Project } from '../api/github/entities/Project';\r\nimport { Tags } from '../utils/constants';\r\nimport { removePrefixFromTag as removePrefix } from '../utils/Helpers';\r\n\r\nexport class ProjectCard\r\n{\r\n    public createProjectCard(project: Project): HTMLElement\r\n    {\r\n        const cardHeading: HTMLDivElement = this.buildHeader(project);\r\n        const cardContent: HTMLDivElement = this.buildContent(project);\r\n        const cardFooter: HTMLDivElement = this.buildFooter(project);\r\n\r\n        const card: HTMLDivElement = this.buildCard(cardHeading, cardContent, cardFooter);\r\n        return card;\r\n    }\r\n\r\n    private buildCard(...children: (Node | string)[]): HTMLDivElement\r\n    {\r\n        const card = document.createElement(\"div\");\r\n        card.className = removePrefix(Tags.PROJECT_CARD_CLASSNAME);\r\n\r\n        card.append(...children);\r\n        return card;\r\n    }\r\n\r\n    private buildHeader(project: Project): HTMLDivElement\r\n    {\r\n        const cardHeading = document.createElement(\"div\");\r\n        cardHeading.className = removePrefix(Tags.PROJECT_CARD_HEADING);\r\n\r\n        const h2 = document.createElement(\"h2\");\r\n        h2.textContent = project.name;\r\n\r\n        const programmingLanguageContainer = document.createElement(\"div\");\r\n        programmingLanguageContainer.className = \"languageContainer\";\r\n\r\n        const programmingLanguage = document.createElement(\"img\");\r\n        programmingLanguage.src = `${project.languageIconUrl}`;\r\n        programmingLanguage.alt = project.language;\r\n\r\n        programmingLanguageContainer.append(programmingLanguage);\r\n\r\n        cardHeading.append(h2, programmingLanguageContainer);\r\n        return cardHeading;\r\n    }\r\n\r\n    private buildContent(project: Project): HTMLDivElement\r\n    {\r\n        const cardContent = document.createElement(\"div\");\r\n        cardContent.className = removePrefix(Tags.PROJECT_CARD_DETAILS);\r\n\r\n        const description = document.createElement(\"p\");\r\n        description.textContent = project.description;\r\n        cardContent.append(description);\r\n        return cardContent;\r\n    }\r\n\r\n    private buildFooter(project: Project): HTMLDivElement\r\n    {\r\n        const cardFooter = document.createElement(\"div\");\r\n        cardFooter.className = removePrefix(Tags.PROJECT_CARD_FOOTER);\r\n\r\n        const url = document.createElement(\"a\");\r\n        url.href = project.url;\r\n        url.target = \"_blank\";\r\n        url.rel = \"noopener noreferrer\";\r\n\r\n        const versionControlImg = document.createElement(\"img\");\r\n        versionControlImg.src = `${project.versionControl}`;\r\n        versionControlImg.alt = project.url;\r\n        versionControlImg.width = 40;\r\n        url.append(versionControlImg);\r\n\r\n        cardFooter.append(url);\r\n        return cardFooter;\r\n    }\r\n}","import { Project } from '../api/github/entities/Project'; // Importiere den Project-Typ\r\nimport { Tags } from '../utils/constants';\r\nimport { getElementFromQuerySelector, removePrefixFromTag } from '../utils/Helpers';\r\nimport { ProjectCard } from './ProjectCard';\r\n\r\ntype ProjectListProps = {\r\n    projects: Project[];\r\n    // Optional: Könntest hier weitere Props übergeben, z.B. für eine Überschrift, CSS-Klassen etc.\r\n    // headingText?: string;\r\n    // className?: string;\r\n};\r\n\r\nexport class ProjectList\r\n{\r\n    public renderProjectList(props: ProjectListProps)\r\n    {\r\n        const projectListContainer: Element = getElementFromQuerySelector(Tags.PROJECTS_LIST_ID);\r\n        projectListContainer.innerHTML = \"\";\r\n\r\n        if (!props.projects || props.projects.length === 0)\r\n        {\r\n            this.showError(projectListContainer);\r\n        }\r\n\r\n        this.renderProjects(props, projectListContainer);\r\n\r\n        return projectListContainer;\r\n    }\r\n\r\n\r\n    private renderProjects(props: ProjectListProps, projectListContainer: Element)\r\n    {\r\n        const fragment = document.createDocumentFragment();\r\n\r\n        for (const project of props.projects)\r\n        {\r\n            const projectCard: ProjectCard = new ProjectCard();\r\n            const projectCardElement = projectCard.createProjectCard(project);\r\n            fragment.appendChild(projectCardElement);\r\n        }\r\n\r\n        projectListContainer.appendChild(fragment);\r\n    }\r\n\r\n    private showError(projectListContainer: Element)\r\n    {\r\n        const noProjectsMessage = document.createElement(\"p\");\r\n        noProjectsMessage.textContent = \"No projects available at the moment. Please check back later!\";\r\n        noProjectsMessage.className = removePrefixFromTag(Tags.ERROR_NO_PROJECTS_CLASSNAME);\r\n        projectListContainer.appendChild(noProjectsMessage);\r\n    }\r\n}","import { Project } from \"../api/github/entities/Project\";\r\nimport { state } from \"../store\";\r\nimport { ProjectList } from \"./ProjectList\";\r\n\r\nexport type NavLinkProjectProps = {\r\n    href: string;\r\n    name: string;\r\n    isContentFetched: boolean\r\n    ignoredByObserver: boolean;\r\n};\r\n\r\nexport class NavLink\r\n{\r\n    public createNavLink(navLinkProps: NavLinkProjectProps): HTMLLIElement\r\n    {\r\n        const li = document.createElement(\"li\");\r\n        const a = document.createElement(\"a\");\r\n        a.textContent = navLinkProps.name;\r\n        a.href = navLinkProps.href;\r\n\r\n        if (navLinkProps.ignoredByObserver)\r\n        {\r\n            this.setupNavLinkForUserClick(a);\r\n        }\r\n\r\n        li.appendChild(a);\r\n        return li;\r\n    }\r\n\r\n    public renderNavLink(parent: DocumentFragment, navLinkProps: NavLinkProjectProps)\r\n    {\r\n        const li = document.createElement(\"li\");\r\n        const a = document.createElement(\"a\");\r\n\r\n        a.textContent = navLinkProps.name;\r\n        a.href = navLinkProps.href;\r\n        if (!navLinkProps.isContentFetched)\r\n        {\r\n            a.classList.add(\"fetched\");\r\n        }\r\n\r\n        if (navLinkProps.ignoredByObserver)\r\n        {\r\n            this.setupNavLinkForUserClick(a);\r\n        }\r\n\r\n        li.appendChild(a);\r\n        parent.appendChild(li);\r\n    }\r\n\r\n    private setupNavLinkForUserClick(a: HTMLAnchorElement)\r\n    {\r\n        a.addEventListener('click', (event) => this.handleClick(event));\r\n    }\r\n\r\n    private handleClick(event: any)\r\n    {\r\n        event.preventDefault();\r\n\r\n        state.selectedFilter = event.target.innerText;\r\n        if (state.selectedFilter === 'All')\r\n        {\r\n            new ProjectList().renderProjectList({ projects: state.projects });\r\n            return;\r\n        }\r\n\r\n        const filteredProjets: Project[] = state.projects.filter(this.isProjectInFilter);\r\n        new ProjectList().renderProjectList({ projects: filteredProjets });\r\n    }\r\n\r\n    private isProjectInFilter(value: Project)\r\n    {\r\n        var isInFilter = value.language === state.selectedFilter;\r\n\r\n        return isInFilter;\r\n    }\r\n}","import { Filter } from \"../../../api/github/entities/Filter\";\r\nimport { NavLink, NavLinkProjectProps } from \"../../../components/NavLink\";\r\nimport { state } from \"../../../store\";\r\nimport { getElementFromQuerySelector } from \"../../../utils/Helpers\";\r\nimport { Observer } from \"../observers/IntersectionObserver\";\r\n\r\nexport class ContentProvider\r\n{\r\n    public async loadProjectsIntoNavbar(observer: Observer)\r\n    {\r\n        const filteredProjectLinks = state.filter.map(filter => ({\r\n            href: filter.filterName,\r\n            name: filter.filterName,\r\n            isContentFetched: false,\r\n            ignoredByObserver: true\r\n        }));\r\n\r\n        const dynamicLinks = this.generatePreviousAndNextLinks(observer);\r\n\r\n        this.renderNavbar([...dynamicLinks, ...filteredProjectLinks], true, true);\r\n    }\r\n\r\n    public unloadProjectsFromNavbar()\r\n    {\r\n        const defaultLinks = state.navbarLinks;\r\n        this.renderNavbar(defaultLinks);\r\n    }\r\n\r\n    private renderNavbar(props: NavLinkProjectProps[], hasPreviousSection?: boolean, hasFollowingSection?: boolean)\r\n    {\r\n        const navbarList = getElementFromQuerySelector(\"nav ul\");\r\n        navbarList.innerHTML = \"\";\r\n\r\n        const mainFragment = document.createDocumentFragment();\r\n\r\n        props.forEach(link =>\r\n        {\r\n            let navLink = new NavLink();\r\n            navLink.renderNavLink(mainFragment, {\r\n                name: link.name,\r\n                href: link.href,\r\n                isContentFetched: link.isContentFetched,\r\n                ignoredByObserver: link.ignoredByObserver\r\n            });\r\n        });\r\n\r\n        navbarList.appendChild(mainFragment);\r\n    }\r\n\r\n    private generatePreviousAndNextLinks(observer: Observer): NavLinkProjectProps[]\r\n    {\r\n        const links: NavLinkProjectProps[] = [];\r\n\r\n        if (observer.HasPrevious())\r\n        {\r\n            const previousSectionName = observer.getSectionNameByIndex(observer.currentSectionId - 1);\r\n            console.log(`Previous: ${previousSectionName} with id ${observer.currentSectionId - 1}`);\r\n\r\n            if (previousSectionName)\r\n            {\r\n                links.unshift({\r\n                    name: this.getNameOfSection(previousSectionName),\r\n                    href: `#$${previousSectionName}`,\r\n                    isContentFetched: false,\r\n                    ignoredByObserver: false\r\n                })\r\n            }\r\n        }\r\n\r\n        if (observer.HasNext())\r\n        {\r\n            const nextSectionName = observer.getSectionNameByIndex(observer.currentSectionId + 1);\r\n            console.log(`Next: ${nextSectionName} with id ${observer.currentSectionId + 1}`);\r\n\r\n            if (nextSectionName)\r\n            {\r\n                links.push({\r\n                    name: this.getNameOfSection(nextSectionName),\r\n                    href: `#$${nextSectionName}`,\r\n                    isContentFetched: false,\r\n                    ignoredByObserver: false\r\n                })\r\n            }\r\n        }\r\n\r\n        return links;\r\n    }\r\n\r\n    getNameOfSection = (section: string) => \r\n    {\r\n        return section.charAt(0).toUpperCase() + section.slice(1);\r\n    }\r\n}","\r\nimport { state } from \"../../../store\";\r\nimport { Tags } from \"../../../utils/constants\";\r\nimport { ContentProvider } from \"../provider/NavContentProvider\";\r\n\r\nexport class Observer\r\n{\r\n    private previousEntryId: string = \"\";\r\n    private sections: Element[] = []\r\n    private triggerSections: Tags[] = [\r\n        Tags.OBSERVER_PROJECT_SECTION\r\n    ]\r\n    currentSectionId: number = -1;\r\n\r\n    private options = {\r\n        threshold: 0.5,\r\n    }\r\n\r\n    private navContentProvider;\r\n    private scrollObserver: IntersectionObserver;\r\n\r\n    constructor()\r\n    {\r\n        this.scrollObserver = new IntersectionObserver(this.callback, this.options);\r\n        this.navContentProvider = new ContentProvider();\r\n    }\r\n\r\n    private callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) =>\r\n    {\r\n        const currentEntry = entries.find(entry => entry.isIntersecting);\r\n\r\n        if (currentEntry)\r\n        {\r\n            const currentSectionId = currentEntry.target.id;\r\n\r\n            state.previousSection = this.previousEntryId;\r\n            const newSectionId = this.sections.findIndex(section => section.id === currentSectionId);\r\n\r\n            if (currentSectionId !== this.previousEntryId)\r\n            {\r\n                if (this.triggerSections.includes(`#${currentSectionId}`))\r\n                {\r\n                    this.navContentProvider.loadProjectsIntoNavbar(this);\r\n                    window.history.pushState(currentEntry.target.textContent, \"Title\", `#${currentEntry.target.id}`);\r\n                }\r\n                else\r\n                {\r\n                    this.navContentProvider.unloadProjectsFromNavbar();\r\n                    window.history.pushState(currentEntry.target.textContent, \"Title\", \"/\");\r\n                }\r\n\r\n                this.previousEntryId = currentSectionId;\r\n                this.currentSectionId = newSectionId;\r\n            }\r\n        }\r\n    };\r\n\r\n    public get get(): IntersectionObserver\r\n    {\r\n        return this.scrollObserver;\r\n    }\r\n\r\n    public HasNext(): boolean\r\n    {\r\n        return this.currentSectionId < this.sections.length - 1;\r\n    }\r\n\r\n    public HasPrevious(): boolean\r\n    {\r\n        return this.currentSectionId > 0;\r\n    }\r\n\r\n    public goToNext()\r\n    {\r\n        if (this.HasNext())\r\n        {\r\n            this.currentSectionId++;\r\n            this.sections[this.currentSectionId].scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }\r\n\r\n    public goToPrevious()\r\n    {\r\n        if (this.HasPrevious())\r\n        {\r\n            this.currentSectionId--;\r\n            this.sections[this.currentSectionId].scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }\r\n\r\n    public getCurrentSectionName(): string\r\n    {\r\n        return this.sections[this.currentSectionId].id;\r\n    }\r\n\r\n    public getSectionNameByIndex(index: number): string | undefined\r\n    {\r\n        if (index >= 0 && index < this.sections.length)\r\n        {\r\n            return this.sections[index].id;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public observeSections()\r\n    {\r\n        this.sections = Array.from(document.querySelectorAll('section'));\r\n        this.sections.forEach(section =>\r\n        {\r\n            this.get.observe(section)\r\n        });\r\n    }\r\n}","import { NavLink, NavLinkProjectProps } from './NavLink';\r\n\r\ntype NavbarProps = {\r\n    links: NavLinkProjectProps[];\r\n};\r\n\r\nexport class Navbar\r\n{\r\n    public createNavbar(props: NavbarProps): HTMLUListElement\r\n    {\r\n        const navLink: NavLink = new NavLink();\r\n        const ul = document.createElement(\"ul\");\r\n\r\n        const fragment = document.createDocumentFragment();\r\n        props.links.forEach(link =>\r\n        {\r\n            fragment.appendChild(navLink.createNavLink(link));\r\n        });\r\n\r\n        ul.appendChild(fragment);\r\n        return ul;\r\n    }\r\n}","import languageIcons from \"../data/programmingIcons.json\";\r\nimport versionControlIcons from \"../data/versionControlIcons.json\";\r\n\r\nexport class IconService\r\n{\r\n    private readonly languageIconMap: { [key: string]: string; } | undefined;\r\n    private readonly versionControlIcanMap: { [key: string]: string; } | undefined;\r\n\r\n    private availableLanguages: any[] = [];\r\n\r\n    constructor()\r\n    {\r\n        this.languageIconMap = languageIcons;\r\n        this.versionControlIcanMap = versionControlIcons;\r\n    }\r\n\r\n    public getLanguageIconUrl(language: string)\r\n    {\r\n        if (this.languageIconMap === undefined)\r\n            throw new Error(`No icon found for language ${language}`);\r\n\r\n        return this.languageIconMap[language.toLowerCase()];\r\n    }\r\n\r\n    public getVersionControlIconUrl(url: string)\r\n    {\r\n        if (this.versionControlIcanMap === undefined)\r\n            throw new Error(`No icon found for language ${url}`);\r\n\r\n        return this.versionControlIcanMap[this.getDomainFromVersionControl(url)];\r\n    }\r\n\r\n    public hasIconForLanguage(language: string): boolean\r\n    {\r\n        const languageSet = new Set(this.availableLanguages);\r\n        return languageSet.has(language.toLowerCase);\r\n    }\r\n\r\n    private getDomainFromVersionControl(url: string): string\r\n    {\r\n        let hostname: string = new URL(url).host;\r\n        let withoutTopLevelDomain = hostname.substring(0, hostname.indexOf(\".\"));\r\n        return withoutTopLevelDomain;\r\n    }\r\n}","import { GitHubRepoApiResponse, Project } from '../entities/Project';\r\nimport { IconService } from '../../../services/IconService';\r\n\r\nexport function mapGitHubReposToProjects(repos: GitHubRepoApiResponse[]): Project[]\r\n{\r\n    const iconService = new IconService();\r\n\r\n    const languageNameMap: { [key: string]: string } = {\r\n        'C#': 'csharp',\r\n        'C++': 'cpp',\r\n    };\r\n\r\n    const mappedProjects = repos.map(repo =>\r\n    {\r\n        const rawLanguage = repo.language ?? \"Not specified\";\r\n\r\n        const mappedLanguage = languageNameMap[rawLanguage] || rawLanguage;\r\n\r\n        return {\r\n            name: repo.name,\r\n            description: repo.description ?? \"No description available.\",\r\n            url: repo.url,\r\n            imageUrl: repo.image ?? \"No avatar available.\",\r\n            language: rawLanguage,\r\n            languageIconUrl: iconService.getLanguageIconUrl(mappedLanguage),\r\n            versionControl: iconService.getVersionControlIconUrl(repo.url),\r\n        };\r\n    });\r\n\r\n    return mappedProjects;\r\n}","import { FilePaths } from '../../../utils/constants';\r\nimport { GitHubRepoApiResponse, Project } from '../entities/Project';\r\nimport { mapGitHubReposToProjects } from '../mappers/GitHubRepoMapper';\r\n\r\nexport async function fetchProjects(): Promise<Project[]>\r\n{\r\n    try\r\n    {\r\n        const response = await fetch(FilePaths.PROJECTS_DATA_PATH);\r\n        if (!response.ok)\r\n        {\r\n            throw new Error(`Failed to load projects.json: ${response.status} ${response.statusText}`);\r\n        }\r\n        const rawProjects: GitHubRepoApiResponse[] = await response.json();\r\n        return mapGitHubReposToProjects(rawProjects);\r\n    } catch (error)\r\n    {\r\n        console.error(\"Error fetching projects from local JSON:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function fetchLanguagesFromProjects(rawProjects: Project[]): Promise<string>\r\n{\r\n    let mappedLanguages = rawProjects.map((toMap => toMap.language));\r\n    let removedDuplicates = Array.from(new Set(mappedLanguages));\r\n    return JSON.stringify(removedDuplicates, null, 2);\r\n}","import { Observer } from \"./services/web/observers/IntersectionObserver\";\r\nimport { Navbar } from './components/Navbar';\r\nimport { ProjectList } from \"./components/ProjectList\";\r\n\r\nimport { state, updateState } from './store';\r\nimport { fetchProjects } from './api/github/services/projectsAPI';\r\nimport { renderGlobalError, renderError as showError } from \"./utils/Helpers\";\r\n\r\nconst navElement = document.querySelector(\"nav\");\r\nconst projectsList = document.querySelector(\"#projects-list\");\r\n\r\nexport class App\r\n{\r\n    private observer;\r\n    private navbar;\r\n\r\n    constructor()\r\n    {\r\n        this.observer = new Observer();\r\n        this.navbar = new Navbar();\r\n    }\r\n\r\n    async initialize()\r\n    {\r\n        console.log(\"Initializing application...\");\r\n        try\r\n        {\r\n            await this.renderPageContents(projectsList, navElement);\r\n            this.observer.observeSections();\r\n\r\n        } catch (error)\r\n        {\r\n            renderGlobalError(projectsList, error);\r\n        }\r\n\r\n        console.log(\"Application initialized.\");\r\n    }\r\n\r\n    private async renderPageContents(projectsList: Element | null, navElement: HTMLElement | null)\r\n    {\r\n        const initialProjects = await fetchProjects();\r\n        updateState(initialProjects);\r\n\r\n        if (projectsList)\r\n        {\r\n            this.renderProjects(projectsList);\r\n        }\r\n\r\n        if (navElement)\r\n        {\r\n            this.buildNavbar(navElement);\r\n        }\r\n    }\r\n\r\n    private async renderProjects(projectsListTag: Element): Promise<void>\r\n    {\r\n        projectsListTag.innerHTML = \"<p>Loading projects...</p>\";\r\n\r\n        while (projectsListTag.firstChild)\r\n        {\r\n            projectsListTag.removeChild(projectsListTag.firstChild);\r\n        }\r\n\r\n        new ProjectList().renderProjectList({ projects: state.projects });\r\n    }\r\n\r\n    private async buildNavbar(navbarElement: HTMLElement)\r\n    {\r\n        while (navbarElement.firstChild)\r\n        {\r\n            navbarElement.removeChild(navbarElement.firstChild);\r\n        }\r\n\r\n        navbarElement.appendChild(this.navbar.createNavbar({ links: state.navbarLinks }))\r\n    }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => new App().initialize());"],"names":["Filter","filterName","filteredContent","language","projects","project","_FilePaths","FilePaths","_Tags","Tags","_FilterConstants","FilterConstants","createFilters","languages","p","allFilter","languageFilters","lang","state","updateState","newProjects","renderError","element","error","errorElement","renderGlobalError","removePrefixFromTag","value","getElementFromQuerySelector","selector","ProjectCard","cardHeading","cardContent","cardFooter","children","card","removePrefix","h2","programmingLanguageContainer","programmingLanguage","description","url","versionControlImg","ProjectList","props","projectListContainer","fragment","projectCardElement","noProjectsMessage","NavLink","navLinkProps","li","a","parent","event","filteredProjets","isInFilter","ContentProvider","section","observer","filteredProjectLinks","filter","dynamicLinks","defaultLinks","hasPreviousSection","hasFollowingSection","navbarList","mainFragment","link","links","previousSectionName","nextSectionName","Observer","entries","currentEntry","entry","currentSectionId","newSectionId","index","Navbar","navLink","ul","IconService","languageIcons","versionControlIcons","hostname","mapGitHubReposToProjects","repos","iconService","languageNameMap","repo","rawLanguage","mappedLanguage","fetchProjects","response","rawProjects","navElement","projectsList","App","initialProjects","projectsListTag","navbarElement"],"mappings":"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"}